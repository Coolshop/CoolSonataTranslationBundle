<?php

namespace Coolshop\CoolSonataTranslationBundle\Repository;

use Coolshop\CoolSonataTranslationBundle\Entity\CoolTranslationKey;
use Coolshop\CoolSonataTranslationBundle\Entity\CoolTranslationLocale;

/**
 * CoolTranslationKeyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CoolTranslationKeyRepository extends \Doctrine\ORM\EntityRepository
{

	public function findTranslationsByLocaleAndDomain($locale, $domain = 'messages')
	{
		$query = $this->getEntityManager()->createQuery("
				SELECT tK, tL
				FROM CoolSonataTranslationBundle:CoolTranslationKey tK
				JOIN tK.translations tL
				WHERE tK.domain = :domain
					AND tL.locale = :locale
			")
		->setParameters(array(
			"domain" => $domain,
			"locale" => $locale
		));

		return $query->getResult();
	}

    public function findAll()
    {
        return $this->getEntityManager()->createQuery("
                SELECT tK, tL
                FROM CoolSonataTranslationBundle:CoolTranslationKey tK
                JOIN tK.translations tL
            ")
            ->getResult();
    }

	public function findTranslationFreshness($timestamp)
    {
        return $this->getEntityManager()->createQuery("
				SELECT count(tK.transKey)
				FROM CoolSonataTranslationBundle:CoolTranslationKey tK
				JOIN tK.translations tL
				WHERE tL.dateUpdated > :timestamp
			")
            ->setParameter('timestamp', $timestamp, \PDO::PARAM_INT)
        	->getSingleScalarResult();
    }


    /**
     * {@inheritdoc}
     */
    public function removeTranslation(CoolTranslationKey $transKey)
    {
        $this->getEntityManager()->remove($transKey);
        $this->getEntityManager()->flush();
    }

    public function create($key, $domain, $flush = false)
    {
    	$transKey = $this->newInstance();
        $transKey->setTransKey($key);
        $transKey->setDomain($domain);

        $this->getEntityManager()->persist($transKey);

        if ($flush) {
            $this->getEntityManager()->flush();
        }

        return $transKey;
    }

   	
    public function addTranslation(CoolTranslationKey $transKey, $locale, $content, $flush = false)
    {
        $translation = null;

        if (!$transKey->hasTranslation($locale)) {

            $translation = new CoolTranslationLocale($transKey, $locale, $content);

            $transKey->addTranslation($translation);

            $this->getEntityManager()->persist($translation);

            if ($flush) {
                $this->getEntityManager()->flush();
            }
        }

        return $translation;
    }

    
    public function updateTranslation(CoolTranslationKey $transKey, $locale, $content, $flush = false, $merge = false, \DateTime $modifiedOn = null)
    {
        $translation = null;
        $i = 0;
        $end = $transKey->getTranslations()->count();
        $translation = $transKey->getTranslationByLocale($locale);

        if (!is_null($translation)) {
            if ($merge) {
                if ($translation->getLabel() == $content) {
                    return null;
                }
                if ($translation->getCreatedAt() != $translation->getUpdatedAt() && (!$modifiedOn || $translation->getUpdatedAt() > $modifiedOn)) {
                    return null;
                }

                $newTranslation = clone $translation;
                $this->getEntityManager()->remove($translation);
                $this->getEntityManager()->flush();

                $newTranslation->setLabel($content);
                $this->getEntityManager()->persist($newTranslation);
                $translation = $newTranslation;
            }
            $translation->setLabel($content);
        } else {
            return $this->addTranslation($transKey, $locale, $content, $flush);
        }

        if (null !== $translation && $this->getEntityManager() instanceof PropelStorage) {
            $this->getEntityManager()->persist($translation);
        }

        if ($flush) {
            $this->getEntityManager()->flush();
        }

        return $translation;
    }


    private function newInstance()
    {
    	return new CoolTranslationKey();
    }
}
